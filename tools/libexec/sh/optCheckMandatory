# @(#) Set optional default values
# @(#) Check that mandatory positional arguments have been provided
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2017 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
#   Mandatory value of optional arguments have already been checked
#   (see optReadOptArgs).
#
# (I): -
#
# (O): Returns 0 if ok
#
# pwi 2013- 6- 7 creation
# pwi 2013- 7-15 review options dynamic computing
# pwi 2017- 6-21 publish the release at last 

function optCheckMandatory
{
	typeset -i _ret=0

	typeset -i _i=0
	while [ ${_i} -lt ${ttp_optargs_count} ]; do
		typeset _name="${ttp_optargs_key[${_i}]}"
		typeset _value="$(echo $(eval echo '${opt_'${_name}'}'))"

		# set the boolean from the default value
		# at least an hardcoded default has been set by optInitDefaults
		if [ -z "${ttp_optargs_dsc[${_i}]}" ]; then
			if [ -z "${_value}" ]; then
				eval $(echo 'opt_'${_name}'="${opt_'${_name}'_def}"')
			fi

		# an option which accepts/wants a value, but has not been
		# specified, has already been set to 'no' as an hardcoded default
		# by optInitDefaults

		# the option value has been specified in the command-line
		elif [ -z "${_value}" ]; then
			eval $(echo 'opt_'${_name}'="${opt_'${_name}'_def}"')
		fi
		let _i+=1
	done

	typeset -i _i=0
	# positional arguments are set to the value entered in the command-
	#  line (optReadPosArgs), or to the default value if one has been
	#  provided by the verb
	while [ ${_i} -lt ${ttp_posargs_count} ]; do
		typeset _name="${ttp_posargs_key[${_i}]}"
		typeset _value="$(echo $(eval echo '${pos_'${_name}'}'))"
		if [ -z "${_value}" ]; then
			eval $(echo 'pos_'${_name}'="${pos_'${_name}'_def}"')
		fi
		let _i+=1
	done

	return ${_ret}
}

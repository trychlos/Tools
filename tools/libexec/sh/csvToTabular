# @(#) Reformat a csv output to a tabular one
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (©) 2003-2021 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
#   Convert the CSV input stream to a TABULAR format ("à la SQL").
#
#   The input stream is expected to have one header line with column
#   names.
#
# Column width computation:
#
#   The maximal width of the screen is specified as an argument of the Perl code.
#   A maximal suggested width is computed as the maximal width divided by the
#   count of columns. If a column is smaller than this suggested width, then
#   the suggested width of others columns is recomputed (increased). 
#
# (I). 1. (opt.) whether the headers line is to be re-displayed on output
#                yes|no
#                defaults to "yes": headers line is displayed on output
#      2. (opt.) whether to add a rows counter at the end
#                yes|no
#                defaults to "yes": a rows counter is added at the end
#      3. (opt.) input csv separaror
#                defaults to ';'
#      4. (opt.) output tabular separaror
#                defaults to '|'
#      5. (opt.) whether each outputed line should be prefixed, or only the counter one
#                yes|no
#                defaults to "no": only the counter line is prefixed
#
# (O). stdout
#
# pwi 2013- 7-25 creation
# pwi 2017- 6-21 publish the release at last
# pwi 2021-11-29 fix Unicode issue with -CS argument + add fifth optional argument

function csvToTabular
{
	typeset _headers="${1:-yes}"
	typeset _counter="${2:-yes}"
	typeset _csvsep="${3:-${ttp_csvsep:-;}}"
	typeset _tabsep="${4:-${ttp_tabularsep:-|}}"
	typeset _prefix="${5:-no}"
	
	perl -CS -sE '{
		#use utf8;
		sub min {
			$a = shift;
			$b = shift;
			return $a < $b ? $a : $b;
		}
		sub output_dashes {
			print $msg if $with_prefix;
			print "+";
			for( $j=0 ; $j<scalar( @{$lines[0]} ) ; ++$j ){
				$len = min( $column[$j], $suggested );
				$len += 2;
				print "-" x $len;
				print "+";
			}
			print "\n";
		}
		sub output_line {
			$il = shift;
			output_dashes() if $il <= 1;
			print $msg if $with_prefix;
			print ${outsep};
			for( $j=0 ; $j<scalar( @{$lines[0]} ) ; ++$j ){
				$s = $lines[$il][$j];
				$len = length( $s );
				if( $len > $suggested ){
					$s = substr( $lines[$il][$j], 0, $suggested-3 )."...";
				}
				printf( " %-*s %s", min( $column[$j], $suggested ), $s, $outsep );
			}
			print "\n";
		}
		$nl = 0;
		@column = ();
		@lines = ();

		#printf STDERR "with_headers='%s'\n", $with_headers;
		#printf STDERR "with_counter='%s'\n", ${with_counter};
		#printf STDERR "insep='%s'\n", ${insep};
		#printf STDERR "outsep='%s'\n", ${outsep};
		#printf STDERR "msg='%s'\n", $msg;

		while( <STDIN> ){
			if( m/^\[/ ){
				print;
				next;
			}
			chomp;
			$lines[$nl] = [split /${insep}/];
			$icol = 0;
			foreach $col ( @{$lines[$nl]} ){
				$col =~ s/^\s*//;
				$col =~ s/\s*$//;
				$len = length( $col );
				# does not handle rightly extended chars, whether utf8 pragma or not
				#printf STDERR "col='".${col}."', len=$len\n";
				$column[$icol] = $len if !defined( $column[$icol] ) || $len > $column[$icol];
				$icol += 1;
			}
			$nl += 1;
		}
	} END {
		$nbcol = scalar( @column );
		$candidates = $nbcol;
		$suggested = $nbcol ? (( ${max_width} - 2 ) / $nbcol ) - 3 : ${max_width} - 2;
		$reused = 0;
		#printf STDERR "END: nbcol='%u'\ncandidates='%u'\nsuggested='%u'\nreused='%u'\n", $nbcol, $candidates, $suggested, $reused;
		for( $i=0 ; $i<$nbcol ; ++$i ){
			if( $column[$i] < $suggested ){
				$candidates -= 1;
				$reused += $suggested - $column[$i];
			}
		}
		$suggested += $reused / $candidates if $candidates;
		#printf STDERR "END: nbcol='%u'\ncandidates='%u'\nsuggested='%u'\nreused='%u'\n", $nbcol, $candidates, $suggested, $reused;
		for( $i=0 ; $i<$nl ; ++$i ){
			output_line( $i ) if $i > 0 || $with_headers eq "yes";
		}
		output_dashes();
		printf( "%s%d displayed row(s)\n", $msg, $nl-1 ) if $with_counter eq "yes";
	}' -- \
		-with_headers="${_headers}" \
		-with_counter="${_counter}" \
		-insep="${_csvsep}" \
		-outsep="${_tabsep}" \
		-msg="$(msgOutPrefix)" \
		-with_prefix="${_prefix}" \
		-max_width="$(tput cols)"
}

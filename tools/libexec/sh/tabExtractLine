# @(#) Select required lines in the input stream
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2021 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
#   Lines are selected based on the value found in the provided string;
#   if this string is empty, then all values are selected.
#
#   Selection fields are to be passed as a comma-separated string:
#   "<num_field>=<searched_value>[,<num_field>=<searched_value[,...]]
#   where 'num_field' is counted from 1
#
# (I): 1. (opt) character used as field separator (':')
#      2. (opt) comma-separated string of the list of selection fields
#               (empty means all)
#
# (O): stdout: selected lines are displayed
#
# pwi 1998-10-21 creation
# pwi 1999- 3- 9 third argument is optional
# pwi 2001-12- 6 add field separator argument
# pwi 2002- 6-22 remove shebang line
# pwi 2006-10-27 tools become The Tools Project, released under GPL
# pwi 2013- 6-11 selection fields are now provided as a unique string
# pwi 2017- 6-21 publish the release at last 

function tabExtractLine
{
	#set -x
	typeset _sep="${1}"
	[ -z "${_sep}" ] && _sep=":"
	typeset _searched_str="${2}"

	awk -F${_sep} -v searched_str="${_searched_str}" '
		BEGIN {
			# split searched string as 1=prod,2=PUITS,3=oracle
			cnt = split( searched_str, splitted_str, "[[:space:]]*,[[:space:]]*" );
			for( i=1 ; i<=cnt ; ++i ){
				split( splitted_str[i], keys, "[[:space:]]*=[[:space:]]*" );
				searched[i,1] = keys[1];
				searched[i,2] = keys[2];
			}
		}{
			if( length( $0 )){
				selected = 0;
				for( i=1; i<=cnt ; ++i ){
					ref = searched[i,2];
					num = searched[i,1];
					field = $num;
					if( !length( ref ) || ref == field ) selected+=1;
				}
				if( selected == cnt ) print $0;
			}
		}
	'
}

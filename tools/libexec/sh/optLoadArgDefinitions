# @(#) Load from the verb positional and optional arguments
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2017 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
#   Initialize global arrays ttp_optargs and ttp_posargs.
#
#   Optional arguments are defined in 'verb_arg_define_opt' verb
#   function. An optional argument may be defined as:
#
#     <option>            <help line>
#
#     this is a boolean option, thus accepts the '--nooption' syntax
#
#   or as:
#
#     <option>=<value>    <help line>
#
#     this option wants a mandatory value;
#     in the command-line, the syntax '--option <value>' is accepted
#     (the '=' equal sign is not required for a mandatory value)
#
#   or as:
#
#     <option>[=<value>]  <help line>
#
#     this option accepts an optional argument;
#     in the command-line, the syntax '--option=<value>' is required
#     (the '=' equal sign is mandatory for an optional argument)
#
#   Unless a 'verb_arg_read_opt' verb specific function be defined,
#   optional arguments are interpreted like this:
#
#   - the 'opt_<option>_set' variable is set to 'yes' if the option
#     has been entered in the  command-line, to 'no' else;
#     this doesn't depend wehther a boolean option has been entered
#     under its negative form (--nooption), or whether a value has
#     been provided or not to the option;
#
#   - a 'opt_<option>_def' default value may be defined in the
#     'verb_arg_set_defaults' verb function;
#     boolean options have an hardcoded default to 'no'.
#
#   - a 'opt_<option>_def_disp' displayable default value may be defined
#     in the 'verb_arg_set_defaults' verb function when the actual default
#     value is not displayable;
#     see e.g. ttp/filter.ksh for the display of a default regexp.
#
#   - for a boolean option, the 'opt_<option>' variable is set to
#     'yes' if the '--option' positive form has been entered, or to
#     'no' if the '--nooption' negative form has been entered;
#     for an option which accepts/wants a value, the 'opt_<option>'
#     variable is set to the value provided in the command-line;
#     eventually, the 'opt_<option>' variable is set to the default
#     value.
#
#   Positional arguments are defined in 'verb_arg_define_pos' verb
#   function. A positional argument may be defined as:
#
#     <name>              <help line>
#
#     the positional argument is considered mandatory;
#
#   or as:
#
#     [<name>]            <help line>
#
#     the positional argument is optional;
#
#   Unless a 'verb_arg_read_pos' verb specific function be defined,
#   positional arguments are interpreted like this:
#
#   - the 'pos_<name>_set' variable is set to 'yes' if a non-empty
#     value is provided in the command-line, to 'no' else;
#
#   - a 'pos_<name>_def' default value may be defined in the
#     'verb_arg_set_defaults' verb function;
#
#   - the 'pos_<name>' variable is set to the value found in
#     the command-line, defaulting to the default value if any.
#
# (I): -
#
# (O): On output, the global arrays are set as:
#
#      ttp_optargs_key[i] keyword
#                 _hlp[i] help line
#                 _dsc[i] value description if any
#                         without square brackets if any
#                         empty value means this is a boolean option
#                 _mdt[i] whether wants a mandatory value (yes|no)
#
#      ttp_posargs_key[i] keyword
#                         without square brackets if any
#                 _hlp[i] help line
#                 _mdt[i] whether wants a mandatory value (yes|no)
#
# pwi 2013- 6- 3 creation
# pwi 2013- 7-15 improve comments
# pwi 2017- 6-21 publish the release at last 

function optLoadArgDefinitions
{
	typeset _arg
	typeset _help

	typeset -i _copt=0
	typeset -i _lmax=0
	type verb_arg_define_opt >/dev/null 2>&1 && \
		verb_arg_define_opt | strTrim | while read _arg _help; do
			if [ ${#_arg} -gt 0 ]; then
				ttp_optargs_hlp[${_copt}]="${_help}"

				# check if option accepts/wants an argument
				#  else this is a boolean, and accepts the --[no]option syntax
				typeset _isbool
				[ "$(echo "${_arg}" | grep '=')" = "" ] && _isbool="yes" || _isbool="no"

				# if accepts/wants an argument
				#  then split the spec into the keyword in [0]
				#  and the argument description in [3]
				if [ "${_isbool}" = "yes" ]; then
					ttp_optargs_key[${_copt}]="${_arg}"
				else
					typeset _key="$(echo "${_arg}" | sed -e 's#[=[].*$##')"
					typeset _desc="$(echo "${_arg}" | sed -e 's#^[^=[]*\(.*\)$#\1#')"
					#echo "optLoadArgDefinitions: arg='${_arg}', key='${_key}', desc='${_desc}'" >&2
					ttp_optargs_key[${_copt}]="${_key}"
					if [ "${_desc:0:1}" = "[" -a "${_desc:${#_desc}-1}" = "]" ]; then
						ttp_optargs_dsc[${_copt}]="${_desc:1:${#_desc}-2}"
						ttp_optargs_mdt[${_copt}]="no"
					else
						ttp_optargs_dsc[${_copt}]="${_desc}"
						ttp_optargs_mdt[${_copt}]="yes"
					fi
					#echo "_key='${_key}' _desc='${_desc}'"
				fi
				let _copt+=1
			fi
	done
	#echo "_copt=${_copt}"
	#echo "_lmax=${_lmax}"
	ttp_optargs_count=${_copt}

	typeset -i _cpos=0
	type verb_arg_define_pos >/dev/null 2>&1 && \
		verb_arg_define_pos | strTrim | while read _arg _help; do
			if [ ${#_arg} -gt 0 ]; then
				ttp_posargs_hlp[${_cpos}]="${_help}"

				# check if the positional argument is mandatory
				if [ "${_arg:0:1}" = "[" -a "${_arg:${#_arg}-1}" = "]" ]; then
					ttp_posargs_key[${_cpos}]="${_arg:1:${#_arg}-2}"
					ttp_posargs_mdt[${_cpos}]="no"
				else
					ttp_posargs_key[${_cpos}]="${_arg}"
					ttp_posargs_mdt[${_cpos}]="yes"
				fi
				let _cpos+=1
			fi
	done
	#echo "_cpos=${_cpos}"
	ttp_posargs_count=${_cpos}

	#if [ "$(echo "${TTP_DEBUG}" | grep "opt")" != "" ]; then
	#	echo "quitting $0"
	#	set | grep -E '^ttp_posargs|^ttp_optargs'
	#fi
}

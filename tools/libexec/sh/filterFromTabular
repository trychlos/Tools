# @(#) Format a tabular output as a CSV
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2021 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# (I). 1. whether execute verbosely
#         default: 'no'
#      2. whether first input row contains headers
#         default: 'yes'
#      3. input field separator
#         default: ';'
#      4. comma-separated list of outputed columns numbered from 1
#         default: 'ALL'
#      5. canonical form of output format
#         default: 'CSV'
#      6. whether to reproduce headers in output
#         default: 'yes'
#      7. comma-separated list of name of output columns
#         default: <empty> (use default names)
#      8. output field separator
#         default: ';'
#      9. whether to keep tabular output in screen width
#         default: 'yes'
#     10. whether to prefix each output line
#         default: 'no'
#     11. add a data rows counter at the end
#         default: 'no'
#     12. maximum data rows to be displayed on outout
#         default: -1 (illimited)
#
# Please note that, for consistency sake, defaults defined here should be the same
# than those of the 'ttp.sh filter' verb.
#
# (O). the reformatted input stream
#
# pwi 2013- 6- 3 creation
# pwi 2013- 7-10 improve comments
# pwi 2017- 6-21 publish the release at last
# pwi 2021-12-31 adapt to suit the filterFromCsv function, renaming from dbmsToCsv

function filterFromTabular
{
	typeset _verbose="${1:-no}"
	typeset _inheaders="${2:-yes}"
	typeset _insep="${3:-|}"
	typeset _outcols="${4:-ALL}"
	typeset _outfmt="${5:-CSV}"
	typeset _outheaders="${6:-yes}"
	typeset _outnames="${7}"
	typeset _outsep="${8:-;}"
	typeset _screenwidth="${9:-yes}"
	typeset _prefixed="${10:-no}"
	typeset _counter="${11:-no}"
	typeset -i _maxcount=${12:--1}

	perl -se '{
		$inrows = 0;				# count of input rows
		@inlines = ();				# table of input columns per line

		# display data rows counter (because has been asked for)
		# the '$inrows' holds the input lines, maybe with an input header
		sub displayCounter {
			$counter = $inrows;
			$counter -= 1 if $inheaders eq "yes";
			$counter -= 1 if $with_counter eq "yes";
			printf( "%s%d displayed data row(s)\n", $prefix, $counter );
		}

		sub funny_cap( $ ){
			my $instr = shift;
			my $len = length( $instr );
			my $outstr = "";
			if( $len > 0 ){
				$outstr = uc( substr( $instr, 0, 1 ));
				if( $len > 1 ){
					$outstr .= lc( substr( $instr, 1 ));
				}
			}
		}

		# output data on stdout, maybe with headers
		# note that if headers display is asked for, then it is to be considered
		# as present on the first line in the input stream
		# note that if counter display is asked for, then it is to be considered
		# as present on the last line in the input stream
		sub outputCsv {
			$outcolcount = scalar( @{$inlines[0]} );
			$lastrow = $inrows;
			$lastrow -= 1 if $with_counter eq "yes";
			for( $ir=0 ; $ir<$lastrow ; ++$ir ){
				print $prefix if $with_prefix eq "yes";
				for( $ic=1 ; $ic<$outcolcount ; ++$ic ){
					print $outsep if $ic > 1;
					print ${$inlines[$ir]}[$ic];
				}
				print "\n";
			}
		}

		while( <STDIN> ){
			next if m/^\+/;
			chomp;
			$inlines[$inrows] = [split /\s*${insep}\s*/];
			$inrows += 1;
			# end when reaching maxcount (if set)
			if( $inrows >= $maxinrows && $maxinrows > 0 ){
				print $prefix."stopping from reading the input stream after maxcount=".$maxcount."\n";
				last;
			}
		}
	} END {
		outputCsv() if $outfmt eq "CSV";
		displayCounter() if $with_counter eq "yes";
	}' -- \
		-verbose="${_verbose}" \
		-inheaders="${_inheaders}" \
		-insep="${_insep}" \
		-outcols="${_outcols}" \
		-outfmt="${_outfmt}" \
		-outheaders="${_outheaders}" \
		-outnames="${outnames}" \
		-outsep="${_outsep}" \
		-with_prefix="${_prefixed}" \
		-prefix="$(msgOutPrefix)" \
		-with_counter="${_counter}" \
		-maxcount=${_maxcount} \
		-screenwidth="${_screenwidth}" \
		-max_width="$(tput cols)"
}

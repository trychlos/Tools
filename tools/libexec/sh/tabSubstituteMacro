# @(#) Substitute a macro in the input stream
#
# The Tools Project: a Tools System and Paradigm for IT Production
# Copyright (Â©) 2003-2017 Pierre Wieser (see AUTHORS)
#
# The Tools Project is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation; either version 2 of the
# License, or (at your option) any later version.
#
# The Tools Project is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with The Tools Project; see the file COPYING. If not,
# see <http://www.gnu.org/licenses/>.
#
# Synopsis:
#
# (I): 1. (opt) character used as field separator (':')
#      2. macro name to be substituted
#      3. (opt) field number to be used as a replacement
#      4. (opt) value to be used as a replacement
#
# At least one of parameter 3 or 4 must be specified.
#
# (O): stdout: the input line, the macro being replaced
#
# pwi 1998-10-21 creation
# pwi 2001-12- 6 add field separator argument
# pwi 2002- 6-22 remove shebang line
# pwi 2006-10-27 tools become The Tools Project, released under GPL
# pwi 2017- 6-21 publish the release at last 

function tabSubstituteMacro
{
	typeset _sep="${1:-${ttp_sep}}"

	typeset _macro="${2}"
	[ -z "${_macro}" ] && { cat -; return 0; }

	typeset _field_number="${3}"
	typeset _field_value="${4}"
	[ -z "${_field_number}" -a -z "${_field_value}" ] && { cat -; return 0; }

	awk -F${_sep} '{
		# compute the replacement value
		new_value = myvalue
		if( new_value == "" ){
			split( $0, fields )
			new_value = fields[ myfield ]
		}
		# save the original line
		line = $0
		# search for the macro
		idx = index( line, mymacro )
		while( idx > 0 ){
			prev = line
			line = ""
			if( idx > 1 ) line = substr( prev, 1, idx-1 )
			line = line new_value
			len=length( prev )
			if( idx < len-1 ) line = line substr( prev, idx+2, len-2 )
			idx = index( line, mymacro )
			}
		print line
		}' mymacro="${_macro}" myfield="${_field_number}" myvalue="${_field_value}"
}
